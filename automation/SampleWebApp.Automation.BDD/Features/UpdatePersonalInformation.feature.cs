// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SampleWebApp.Automation.BDD.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Update Personal Information", new string[] {
            "Chrome"}, Description="\tIn order to have my correct and up-to-date details stored in the system\r\n\tAs a u" +
        "ser\r\n\tI want to update my personal information", SourceFile="Features\\UpdatePersonalInformation.feature", SourceLine=1)]
    public partial class UpdatePersonalInformationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UpdatePersonalInformation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Update Personal Information", "\tIn order to have my correct and up-to-date details stored in the system\r\n\tAs a u" +
                    "ser\r\n\tI want to update my personal information", ProgrammingLanguage.CSharp, new string[] {
                        "Chrome"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
 #line 8
  testRunner.Given("a user has successfully logged on to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
  testRunner.And("the user is on the personal information page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void UpdateName_Valid(string exampleDescription, string familyName, string givenName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update name - valid", exampleTags);
#line 13
 this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 14
  testRunner.When(string.Format("the user updates with a valid \'{0}\' and \'{1}\'", familyName, givenName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
  testRunner.Then("the entered names are saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
  testRunner.And("the user can see their updated names", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - valid, Valid family name and given name with a length between minim" +
            "um and maximum (2-30), static", SourceLine=19)]
        public virtual void UpdateName_Valid_ValidFamilyNameAndGivenNameWithALengthBetweenMinimumAndMaximum2_30Static()
        {
            this.UpdateName_Valid("Valid family name and given name with a length between minimum and maximum (2-30)" +
                    ", static", "\"Smith\"", "\"John\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - valid, Valid family name and given name with a length between minim" +
            "um and maximum (2-30), regex", SourceLine=19)]
        public virtual void UpdateName_Valid_ValidFamilyNameAndGivenNameWithALengthBetweenMinimumAndMaximum2_30Regex()
        {
            this.UpdateName_Valid("Valid family name and given name with a length between minimum and maximum (2-30)" +
                    ", regex", "^[A-Za-z]{2,30}$", "^[A-Za-z]{2,30}$", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - valid, Valid family name and given name with minimum length (2)", SourceLine=19)]
        public virtual void UpdateName_Valid_ValidFamilyNameAndGivenNameWithMinimumLength2()
        {
            this.UpdateName_Valid("Valid family name and given name with minimum length (2)", "^[A-Za-z]{2}$", "^[A-Za-z]{2}$", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - valid, Valid family name and given name with maximum length (30)", SourceLine=19)]
        public virtual void UpdateName_Valid_ValidFamilyNameAndGivenNameWithMaximumLength30()
        {
            this.UpdateName_Valid("Valid family name and given name with maximum length (30)", "^[A-Za-z]{30}$", "^[A-Za-z]{30}$", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - valid, Valid family name only", SourceLine=19)]
        public virtual void UpdateName_Valid_ValidFamilyNameOnly()
        {
            this.UpdateName_Valid("Valid family name only", "^[A-Za-z]{2,30}$", "\"\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - valid, Valid given name only", SourceLine=19)]
        public virtual void UpdateName_Valid_ValidGivenNameOnly()
        {
            this.UpdateName_Valid("Valid given name only", "\"\"", "^[A-Za-z]{2,30}$", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - valid, Valid family name with multiple given names", SourceLine=19)]
        public virtual void UpdateName_Valid_ValidFamilyNameWithMultipleGivenNames()
        {
            this.UpdateName_Valid("Valid family name with multiple given names", "^[A-Za-z]{2,30}$", "^[A-Za-z]{8} {1}[A-Za-z]{8} {1}[A-Za-z]{12}$", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - valid, Valid family name with valid special characters, e.g. apostr" +
            "ophe", SourceLine=19)]
        public virtual void UpdateName_Valid_ValidFamilyNameWithValidSpecialCharactersE_G_Apostrophe()
        {
            this.UpdateName_Valid("Valid family name with valid special characters, e.g. apostrophe", "O’Hare", "^[A-Za-z]{2,30}$", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - valid, Valid given name with valid special characters, e.g. hyphen", SourceLine=19)]
        public virtual void UpdateName_Valid_ValidGivenNameWithValidSpecialCharactersE_G_Hyphen()
        {
            this.UpdateName_Valid("Valid given name with valid special characters, e.g. hyphen", "^[A-Za-z]{2,30}$", "Vanessa-Kate", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdateName_Invalid(string exampleDescription, string familyName, string givenName, string field, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update name - invalid", exampleTags);
#line 31
 this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 32
  testRunner.When(string.Format("the user updates with an invalid \'{0}\' and or \'{1}\'", familyName, givenName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
  testRunner.Then("the entered names are not saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
  testRunner.And(string.Format("an \'{0}\' is returned for the \'{1}\' on the personal information page", errorMessage, field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - invalid, No family name and given name", SourceLine=37)]
        public virtual void UpdateName_Invalid_NoFamilyNameAndGivenName()
        {
            this.UpdateName_Invalid("No family name and given name", "\"\"", "\"\"", "Last Name", "At least one name is required", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - invalid, Family name with numeric characters", SourceLine=37)]
        public virtual void UpdateName_Invalid_FamilyNameWithNumericCharacters()
        {
            this.UpdateName_Invalid("Family name with numeric characters", "^[A-Za-z]{1,14}[0-9]{1}[A-Za-z]{1,15}$", "^[A-Za-z]{2,30}$", "Last Name", "Invalid Last Name", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - invalid, Family name with invalid special characters", SourceLine=37)]
        public virtual void UpdateName_Invalid_FamilyNameWithInvalidSpecialCharacters()
        {
            this.UpdateName_Invalid("Family name with invalid special characters", "^[A-Za-z]{1,14},{1}[A-Za-z]{1,15}$", "^[A-Za-z]{2,30}$", "Last Name", "Invalid Last Name", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - invalid, Family name with less than minimum length of characters (<" +
            "2)", SourceLine=37)]
        public virtual void UpdateName_Invalid_FamilyNameWithLessThanMinimumLengthOfCharacters2()
        {
            this.UpdateName_Invalid("Family name with less than minimum length of characters (<2)", "^[A-Za-z]{1}$", "^[A-Za-z]{2,30}$", "Last Name", "Last Name too short", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - invalid, Family name with more than maximum length of characters (>" +
            "30)", SourceLine=37)]
        public virtual void UpdateName_Invalid_FamilyNameWithMoreThanMaximumLengthOfCharacters30()
        {
            this.UpdateName_Invalid("Family name with more than maximum length of characters (>30)", "^[A-Za-z]{31}$", "^[A-Za-z]{2,30}$", "Last Name", "Last Name too long", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - invalid, Given name with numeric characters", SourceLine=37)]
        public virtual void UpdateName_Invalid_GivenNameWithNumericCharacters()
        {
            this.UpdateName_Invalid("Given name with numeric characters", "^[A-Za-z]{2,30}$", "^[A-Za-z]{1,14}[0-9]{1}[A-Za-z]{1,15}$", "First Name", "Invalid First Name", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - invalid, Given name with invalid special characters", SourceLine=37)]
        public virtual void UpdateName_Invalid_GivenNameWithInvalidSpecialCharacters()
        {
            this.UpdateName_Invalid("Given name with invalid special characters", "^[A-Za-z]{2,30}$", "^[A-Za-z]{1,14},{1}[A-Za-z]{1,15}$", "First Name", "Invalid First Name", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - invalid, Given name with less than minimum length of characters (<2" +
            ")", SourceLine=37)]
        public virtual void UpdateName_Invalid_GivenNameWithLessThanMinimumLengthOfCharacters2()
        {
            this.UpdateName_Invalid("Given name with less than minimum length of characters (<2)", "^[A-Za-z]{2,30}$", "^[A-Za-z]{1}$", "First Name", "First Name is too short", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update name - invalid, Given name with more than maximum length of characters (>3" +
            "0)", SourceLine=37)]
        public virtual void UpdateName_Invalid_GivenNameWithMoreThanMaximumLengthOfCharacters30()
        {
            this.UpdateName_Invalid("Given name with more than maximum length of characters (>30)", "^[A-Za-z]{2,30}$", "^[A-Za-z]{31}$", "First Name", "First Name is too long", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
