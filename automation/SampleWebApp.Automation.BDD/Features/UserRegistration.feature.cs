// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SampleWebApp.Automation.BDD.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("User Registration", new string[] {
            "Chrome"}, Description="\tIn order to be able to access the website\r\n\tAs an unregistered user\r\n\tI want to " +
        "register to the website", SourceFile="Features\\UserRegistration.feature", SourceLine=1)]
    public partial class UserRegistrationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UserRegistration.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "User Registration", "\tIn order to be able to access the website\r\n\tAs an unregistered user\r\n\tI want to " +
                    "register to the website", ProgrammingLanguage.CSharp, new string[] {
                        "Chrome"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unregistered user should see a link to signup", SourceLine=7)]
        public virtual void UnregisteredUserShouldSeeALinkToSignup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unregistered user should see a link to signup", ((string[])(null)));
#line 8
 this.ScenarioSetup(scenarioInfo);
#line 9
  testRunner.Given("a user is an unregistered user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
  testRunner.When("the user goes to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
  testRunner.Then("the user should see a link to signup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unregistered user should be able to access to a registration form", SourceLine=13)]
        public virtual void UnregisteredUserShouldBeAbleToAccessToARegistrationForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unregistered user should be able to access to a registration form", ((string[])(null)));
#line 14
 this.ScenarioSetup(scenarioInfo);
#line 15
  testRunner.Given("a user is an unregistered user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
  testRunner.And("the user goes to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
  testRunner.When("the user clicks on a registration link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
  testRunner.Then("the user should see a form allowing them to sign up to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void UnregisteredUserShouldBeAbleToSignUpWithValidCredentials(string exampleDescription, string username, string password, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unregistered user should be able to sign up with valid credentials", exampleTags);
#line 21
 this.ScenarioSetup(scenarioInfo);
#line 22
  testRunner.Given("an unregistered user is on the registration form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
  testRunner.When(string.Format("the user fills out the form with a valid \'{0}\' and \'{1}\'", username, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
  testRunner.And("the user further confirms with the entered password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
  testRunner.Then("the user is signed up and taken to the landing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unregistered user should be able to sign up with valid credentials, Valid usernam" +
            "e and password, static", SourceLine=28)]
        public virtual void UnregisteredUserShouldBeAbleToSignUpWithValidCredentials_ValidUsernameAndPasswordStatic()
        {
            this.UnregisteredUserShouldBeAbleToSignUpWithValidCredentials("Valid username and password, static", "\"someone@planetinnovation.com.au\"", "\"Password123\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unregistered user should be able to sign up with valid credentials, Valid usernam" +
            "e and password, regex", SourceLine=28)]
        public virtual void UnregisteredUserShouldBeAbleToSignUpWithValidCredentials_ValidUsernameAndPasswordRegex()
        {
            this.UnregisteredUserShouldBeAbleToSignUpWithValidCredentials("Valid username and password, regex", "^[A-Za-z0-9]{1,60}@[A-Za-z0-9]{5,10}\\.[A-Za-z]{2,4}$", "^[A-Za-z0-9]{8,20}$", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unregistered user should be able to sign up with valid credentials, Valid usernam" +
            "e with minimum length (6)", SourceLine=28)]
        public virtual void UnregisteredUserShouldBeAbleToSignUpWithValidCredentials_ValidUsernameWithMinimumLength6()
        {
            this.UnregisteredUserShouldBeAbleToSignUpWithValidCredentials("Valid username with minimum length (6)", "\"M@J.ex\"", "\"n6k5q_68\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unregistered user should be able to sign up with valid credentials, Valid usernam" +
            "e with maximum length (76)", SourceLine=28)]
        public virtual void UnregisteredUserShouldBeAbleToSignUpWithValidCredentials_ValidUsernameWithMaximumLength76()
        {
            this.UnregisteredUserShouldBeAbleToSignUpWithValidCredentials("Valid username with maximum length (76)", "\"T_NEf7_7%pJ-M+28+J%P_DFgX7W2.Z87OXP7M_uUJ%P_746+Q_vcxfd+1_3n@V1BWIuU9DB.BNAV\"", "\"_Zs4HpF8_4XF_71r\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unregistered user should be able to sign up with valid credentials, Valid passwor" +
            "d with minimum length (8)", SourceLine=28)]
        public virtual void UnregisteredUserShouldBeAbleToSignUpWithValidCredentials_ValidPasswordWithMinimumLength8()
        {
            this.UnregisteredUserShouldBeAbleToSignUpWithValidCredentials("Valid password with minimum length (8)", "\"8_%@2QRI8Z8jT.XfS\"", "\"OS_GF.20\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Unregistered user should be able to sign up with valid credentials, Valid passwor" +
            "d with maximum length (20)", SourceLine=28)]
        public virtual void UnregisteredUserShouldBeAbleToSignUpWithValidCredentials_ValidPasswordWithMaximumLength20()
        {
            this.UnregisteredUserShouldBeAbleToSignUpWithValidCredentials("Valid password with maximum length (20)", "\"DI%3N3phj@0W7oB.eXgH\"", "\"Up_D_4_8IlorYm.yh63Y\"", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
