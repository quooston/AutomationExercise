@inherits TechTalk.SpecRun.Framework.Reporting.CustomTemplateBase<TestRunResult>
<!DOCTYPE html>
@using System
@using System.Linq
@using System.Globalization
@using TechTalk.SpecRun.Framework
@using TechTalk.SpecRun.Framework.Results
@using TechTalk.SpecRun.Framework.TestSuiteStructure
@helper GetReportBar(TestItemExecutionResult test)
{
    <td class="testview-item"
        data-sr-exectime="@GetSeconds(test.ExecutionTime)" data-sr-rescode="@((int) test.ResultType)" data-sr-order="@test.ExecutionOrder" data-sr-acttime="@GetSeconds(test.ActExecutionTime)">
        <a class="bar @("color" + test.ResultType)"
           style="height: @GetBarSize(tr => tr.ExecutionTime.DurationMilliseconds, test, 0.0, 60)px;"
           title="@GetTestBarTooltip(test)"
           href="#@GetTestAnchor(test)">
            &nbsp;
        </a>
    </td>
}
@helper GetTimelineBar(DateTime startTime, DateTime endTime, double msecPerPixel, TestItemExecutionResult test)
{
var endPixel = Math.Max((int)Math.Round((endTime - Model.ExecutionTime.StartTime).TotalMilliseconds / msecPerPixel), currentPixel + 4);
var size = endPixel - currentPixel;
currentPixel = endPixel;
    <td>
        <a class="bar @(test == null ? "startupBar" : "color" + test.ResultType.ToString())"
           style="width: @(size - 1)px;"
           @if (test != null) { @: title="@GetTestBarTooltip(test)"
                                     @: href="#@GetTestAnchor(test)"
                                 } else { @: title="test thread startup"
                                 }>
            &nbsp;
        </a>
    </td>
}
@helper GetSummaryHeader(string titleHeader)
{
    <tr>
        @if (titleHeader != null)
        {
            <th>@titleHeader</th>
        }
        <th colspan="2">Success rate</th>
        <th>Tests</th>
        <th>Succeeded</th>
        <th>Failed</th>
        <th>Pending</th>
        <th>Ignored</th>
        <th>Skipped</th>
    </tr>
}
@helper GetSummaryRow(TestCollectionResultSummary summary, string title, string href)
{
    <tr>
        @if (title != null)
        {
            <td>
                <a href="#@href">@title</a>
            </td>
        }
        @GetSummaryRowTail(summary)
    </tr>
}
@helper GetSummaryRowTail(TestCollectionResultSummary summary)
{
    <td>
        @if (summary.TotalSucceeded + summary.TotalFailure + summary.TotalPending > 0)
        {
            @:@Math.Round((double)summary.TotalSucceeded * 100 / (summary.TotalSucceeded + summary.TotalFailure + summary.TotalPending))%
        }
        else
        {
            @:n/a
        }
    </td>
    <td>
        <table class="timelineview" cellpadding="0" cellspacing="0">
            <tr>
                @foreach (var resultCount in summary.ResultCounts.Where(rc => rc.Value > 0).OrderByDescending(rc => rc.Key.GetGroup() == TestNodeResultTypeGroup.Success ? 1000 : (int)rc.Key))
                {
                    <td>
                        <a class="bar @("color" + resultCount.Key)"
                           style="width: @(Math.Round((double) resultCount.Value*200/summary.Total - 1))px;"
                           title="@summary.GetText(resultCount.Key)"
                           @if (resultCount.Key.GetGroup() == TestNodeResultTypeGroup.Failure) { @: href="#error_summary"
                                                                                 } />
                    </td>
                }
            </tr>
        </table>
    </td>
    <td>@summary.TotalMessage</td>
    <td>@summary.Succeeded</td>
    <td>@summary.TotalFailure</td>
    <td>@summary.TotalPending</td>
    <td>@summary.Ignored</td>
    <td>@summary.Skipped</td>
}
@helper TestItemLinks(TestItem testItem, int level)
{
if (level == 0)
{
        <a href="#@GetTestNodeAnchor(testItem, "t", 0)">@testItem.Type: @testItem.Title</a>
}
else
{
        <a href="#@GetTestNodeAnchor(testItem, "t", 0)">@testItem.Title</a>
}
var tiResult = GetTestItemResult(testItem);
if (tiResult != null)
{
    foreach (var retry in tiResult.Executions.Skip(1))
    {
            <a href="#@GetTestNodeAnchor(testItem, "t", retry.TestItemExecutionIndex)">retry #@retry.TestItemExecutionIndex</a>
    }
}
}
@helper TestNodeLinks(TestNode testNode, int level)
{
if (testNode is TestItem)
{
        @TestItemLinks((TestItem)testNode, level)
}
if (testNode is TestCollection)
{
        <span>@testNode.Type: @testNode.Title</span>
        <ul class="subNodeLinks">
            @foreach (var subTestNode in ((TestCollection)testNode).SubNodes)
            {
                <li>
                    @TestNodeLinks(subTestNode, level + 1)
                </li>
            }
        </ul>
}
}
@helper TestExecutionSummary(TestItemExecutionResult test)
{
    var testItem = test.TestItemResult.TestNode;
    var outline = testItem.Title;
    var testTitle = GetTestTitle(test);
    var testFeature = testTitle.Replace(outline, "");


    <p class="test-type">@testItem.Type</p>
    <p class="test-outline">@outline</p>
    <p class="test-feature">@testFeature</p>

    if (!string.IsNullOrEmpty(testItem.Description))
    {
        <p class="test-description-optional">
            <pre>@testItem.Description</pre>
        </p>
    }
    if (@testItem.Tags.Any())
    {
        <ul class="test-tags">
            @foreach (var tag in testItem.Tags)
            {
                <li>@tag</li>
            }
        </ul>
    }
    <p class="test-result">@test.ResultType</p>
    <p class="test-target">@testItem.TestTarget</p>
    <p class="test-start-time">@test.ExecutionTime.StartTime</p>
    <p class="test-execution-time">@test.ExecutionTime.DurationSeconds</p>
    <p class="test-error">@(test.Result.Error)</p>

}
@helper TestExecutionDetail(TestItemExecutionResult test)
{
int Index = 1;
    <table class="sortable">
        <tr>
            <th>
                <a>Index</a>
            </th>
            <th>
                <a>Steps</a>
            </th>
            <th>
                <a>Trace</a>
            </th>
            <th>
                <a>Result</a>
            </th>
            <th>
                <a>Duration</a>
            </th>
        </tr>
        @foreach (var traceEvent in test.Result.TraceEvents)
        {
            if (!IsRelevant(traceEvent))
            {
                continue;
            }
            var relatedNode = GetTestNode(traceEvent);
            <tr>
                <td markdown="block">@Index</td>
                <td markdown="block">
                    <pre class="log">@(traceEvent.BusinessMessages.TrimEnd())</pre>
                </td>
                <td markdown="block">
                    <!-- [@traceEvent.Type: @relatedNode.Type - @relatedNode.Title] -->
                    <pre class="log">@Raw(FormatTechMessages(traceEvent.TechMessages.TrimEnd()).Replace("SCREENSHOT[ <a href=", "<img width=100% height=auto src=").Replace("</a> ]SCREENSHOT", "</img>"))</pre>
                    @if (!string.IsNullOrEmpty(traceEvent.Error))
                    {
                        <div class="errorMessage">@Raw(FormatTechMessages(traceEvent.Error))</div>
                        <pre class="stackTrace">@Raw(FormatTechMessages(traceEvent.StackTrace.TrimEnd()))</pre>
                    }
                </td>
                <td markdown="block">@traceEvent.ResultType</td>
                <td markdown="block">@GetSeconds(Math.Round(traceEvent.Duration.TotalSeconds, 3))s</td>
            </tr>
            Index = Index + 1;
        }
    </table>

}
@functions
{

    string GetFixtureTitle(TestNode fixtureNode)
    {
        return fixtureNode.IsDefaultTestTarget ? fixtureNode.Title : string.Format("{0} (target: {1})", fixtureNode.Title, fixtureNode.TestTarget);
    }

}
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <title>@Model.Configuration.ProjectName Test Execution Report</title>
    <script type="text/javascript" src="sorttable.js"></script>
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.6.2.min.js"></script>
    <script type="text/javascript">
        /**
        * jQuery.fn.sortElements
        * --------------
        * #author James Padolsey (http://james.padolsey.com)
        * #version 0.11
        * #updated 18-MAR-2010
        * #url https://raw.github.com/jamespadolsey/jQuery-Plugins/master/sortElements/jquery.sortElements.js
        * --------------
        * #param Function comparator:
        *   Exactly the same behaviour as [1,2,3].sort(comparator)
        *
        * #param Function getSortable
        *   A function that should return the element that is
        *   to be sorted. The comparator will run on the
        *   current collection, but you may want the actual
        *   resulting sort to occur on a parent or another
        *   associated element.
        *
        *   E.g. $('td').sortElements(comparator, function(){
        *      return this.parentNode;
        *   })
        *
        *   The <td>'s parent (<tr>) will be sorted instead
        *   of the <td> itself.
        */
        jQuery.fn.sortElements = (function() {

            var sort = [].sort;

            return function(comparator, getSortable) {

                getSortable = getSortable || function() { return this; };

                var placements = this.map(function() {

                    var sortElement = getSortable.call(this),
                        parentNode = sortElement.parentNode,

                        // Since the element itself will change position, we have
                        // to have some way of storing it's original position in
                        // the DOM. The easiest way is to have a 'flag' node:
                        nextSibling = parentNode.insertBefore(
                            document.createTextNode(''),
                            sortElement.nextSibling
                        );

                    return function() {

                        if (parentNode === this) {
                            throw new Error(
                                "You can't sort elements if any one is a descendant of another."
                            );
                        }

                        // Insert before flag:
                        parentNode.insertBefore(this, nextSibling);
                        // Remove flag:
                        parentNode.removeChild(nextSibling);

                    };

                });

                return sort.call(this, comparator)
                    .each(function(i) {
                        placements[i].call(getSortable.call(this));
                    });

            };

        })();
    </script>


</head>
<body>
    <h1>@Model.Configuration.ProjectName Test Execution Report</h1>
    <ul>
        <li>Project: @Model.Configuration.ProjectName</li>
        <li>Configuration: @Model.Configuration.Name</li>
        <li>Test Assemblies: @string.Join(", ", Model.Configuration.TestAssemblyPaths)</li>
        <li>Start Time: @Model.ExecutionTime.StartTime</li>
        <li>Duration: @Model.ExecutionTime.Duration</li>
        <li>Test Threads: @Model.TestThreads.Count</li>
        @if (Model.FrameworkError != null)
        {
            <li>
                <div class="errorMessage">Execution framework error: @(Model.FrameworkError.ToString())</div>
            </li>
        }
    </ul>
    <p class="test-overall-summary">@Model.Summary.ConcludedResultMessage</p>

    <h2>Execution Details</h2>
    @foreach (var test in Model.TestExecutionResults.OrderBy(tr => tr.ExecutionOrder))
    {        
        <div class="test-execution">
            @TestExecutionSummary(test)
            @TestExecutionDetail(test)
        </div>               
    }

</body>

</html>